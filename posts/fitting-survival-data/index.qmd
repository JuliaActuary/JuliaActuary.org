---
title: "Fitting survival data with MortaltityTables.jl"
categories: [survival, tutorial]
---
```{julia}
#| echo: false
#| output: false
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```


```{julia}
begin
    using LsqFit
    using MortalityTables
    using Plots
    using Distributions
    using Optim
    using DataFrames
    using Survival
end
```

*This tutorial is via [PharmCat on Github](https://gist.github.com/PharmCat/fe1e64a2241aa35d3a3fa925989c3784) (this link has similar code with comments in Russian and English).*

## Fitting a Weibull survival curve

Sample data:

```{julia}
data = let
    survival = [0.99, 0.98, 0.95, 0.9, 0.8, 0.65, 0.5, 0.38, 0.25, 0.2, 0.1, 0.05, 0.02, 0.01]
    times = 1:length(survival)
    DataFrame(; times, survival)
end
```

Visualizing the data:

```{julia}
plt = plot(data.times, data.survival, label="observed survival proportion", xlabel="time")

```

Define the two-parameter Weibull model:

- `x`: array of independent variables
- `p`: array of model parameters

`model(x, p)` will accept the full data set as the first argument `x`.
This means that we need to write our model function so it applies the model to the full dataset. We use `@.` to apply ("broadcast") the calculations across all rows.

```{julia}
@. model1(x, p) = survival(MortalityTables.Weibull(; m=p[1], σ=p[2]), x)
```

#### Fitting the Model
And fit the model with [LsqFit.jl](https://github.com/JuliaNLSolvers/LsqFit.jl):

```{julia}
fit1 = curve_fit(model1, data.times, data.survival, [1.0, 1.0])

plot!(plt, data.times, model1(data.times, fit1.param), label="fitted model")
```

### Maximum Likelihood estimation

Generate 100 sample datapoints:

```{julia}
t = rand(Weibull(fit1.param[2], fit1.param[1]), 100)
```

### Without Censored Data"

```{julia}
#No censored data
fit_mle(Weibull, t)
```

### With Censored Data

Pick some arbitrary observations to censor:

```{julia}
c = collect(trues(100))
c[[1, 3, 7, 9]] .= false
```


```{julia}
#ML function
survmle(x) = begin
    ml = 0.0
    for i = 1:length(t)
        if c[i]
            ml += logpdf(Weibull(x[2], x[1]), t[i]) #if not censored log(f(x))
        else
            ml += logccdf(Weibull(x[2], x[1]), t[i]) #if censored log(1-F)
        end
    end
    -ml
end

opt = Optim.optimize(
    survmle,          # function to optimize
    [1.0, 1.0], # lower bound
    [15.0, 15.0],            # upper bound
    [3.0, 3.0]          # initial guess
)
```

The solution converges to similar values as the function generating the synthetic data:

```{julia}
Optim.minimizer(opt)
```

## Fitting Kaplan Meier

KaplanMeier comes from [Survival.jl](https://github.com/JuliaStats/Survival.jl).



```{julia}
#t- time vector;c - censored events vector
km = fit(Survival.KaplanMeier, t, c)

plt2 = plot(km.events.time, km.survival; labels="Empirical")
```

```{julia}
@. model(x, p) = survival(MortalityTables.Weibull(; m=p[1], σ=p[2]), x)

mfit = LsqFit.curve_fit(model, km.events.time, km.survival, [2.0, 2.0])

plot!(plt2, km.events.time, model(km.events.time, mfit.param), labels="Theoretical")
```