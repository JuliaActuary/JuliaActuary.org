---
title: "Exposure Calculation with ExperienceAnalysis.jl"
categories: [mortalitytables, exposures,experience-analysis,dataframes,tutorial]
---
```{julia}
#| echo: false
#| output: false
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

In this tutorial, we will walk through how to calculate exposures using the [ExperienceAnalysis.jl package](/packages/#lifecontingenciesjl).

In summary, the package will help calculate the exposure periods given parameters about the kind of period and timepoints under consideration. This will return an array of tuples with a `from` and `to` date:

```{julia}
using ExperienceAnalysis
using Dates

issue = Date(2016, 7, 4)
termination = Date(2020, 1, 17)
basis = ExperienceAnalysis.Anniversary(Year(1))
exposure(basis, issue, termination)
```


## Available Exposure Basis

- `ExperienceAnalysis.Anniversary(period)` will give exposures periods based on the first date
- `ExperienceAnalysis.Calendar(period)` will follow calendar periods (e.g. month or year)
- `ExperienceAnalysis.AnniversaryCalendar(period,period)` will split into the smaller of the calendar or policy anniversary period.

Where `period` is a [Period Type from the Dates standard library](https://docs.julialang.org/en/v1/stdlib/Dates/#Period-Types).

Calculate exposures with `exposures(basis,from,to,continue_exposure)`. 

- `continue_exposures` indicates whether the exposure should be extended through the full exposure period rather than terminate at the `to` date.

## Full Example


We'll start with this as our data:
```{julia}
using DataFrames
df = DataFrame(
    id=[1, 2, 3],
    issue=[Date(2016, 7, 4), Date(2016, 1, 1), Date(2016, 1, 1)],
    end_date=[Date(2020, 1, 17), Date(2018, 5, 4), Date(2020, 12, 31)],
    status=["Claim", "Lapse", "Inforce"]
)
```

Define the start and end of the study:

```{julia}
study_end = Date(2020, 6, 30)
study_start = Date(2018, 6, 30)
```

Calculate the exposure by [broadcasting](https://docs.julialang.org/en/v1/manual/mathematical-operations/#man-dot-operators) the exposure function over the three arrays we are passing to it: 

```{julia}
df.exposure = exposure.(
    ExperienceAnalysis.Anniversary(Year(1)),   # The basis for our exposures
    df.issue,                                  # The `from` date
    df.end_date,                               # the last observed date
    df.status .== "Claim";                        # a boolean vector indicating continuation
    study_start=study_start,
    study_end=study_end
)
```

In our dataframe, we actually have a column that contains an array of tuples now, so to expand it so that each exposure period gets a row, we `flatten` the dataframe to get our exposures:

```{julia}
df = flatten(df, :exposure)
```

### Exposure Fraction

This can be extended to calculate the decimal fraction of the year under different day count conventions, such as assuming 30/360 or Actual/365, etc. using the [`DayCounts.jl` package](https://github.com/JuliaFinance/DayCounts.jl).

```{julia}
using DayCounts

df.exposure_fraction = map(e -> yearfrac(e.from, e.to, DayCounts.Actual360()), df.exposure)
df[:, [:exposure, :exposure_fraction]]
```


## Discussion and Questions

If you have other ideas or questions, feel free to also open an issue, or discuss on the community [Zulip](https://julialang.zulipchat.com/#narrow/stream/249536-actuary) or [Slack #actuary channel](https://slackinvite.julialang.org/). We welcome all actuarial and related disciplines!

### References

- [Experience Study Calculations](https://www.soa.org/globalassets/assets/files/research/experience-study-calculations.pdf) by the Society of Actuaries
- [ExperienceAnalysis.jl package on GitHub](https://github.com/JuliaActuary/ExperienceAnalysis.jl)