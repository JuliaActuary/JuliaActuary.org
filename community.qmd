---
title: "Learn"
toc: true

---

## Get Help

> Ask questions or suggest ideas

### Discussion and Questions

If you have other ideas or questions, join the [JuliaActuary Github Discussions](https://github.com/orgs/JuliaActuary/discussions). Or come say hello on the community [Zulip](https://julialang.zulipchat.com/#narrow/stream/249536-actuary) or [Slack #actuary channel](https://julialang.org/slack/). We welcome all actuarial and related disciplines!

### Help mode

You can also access help text when using the packages in the REPL by [activating help mode](https://docs.julialang.org/en/v1/stdlib/REPL/index.html#Help-mode-1), e.g.:

```julia-repl
julia> ? survival
    survival(mortality_vector,to_age)
    survival(mortality_vector,from_age,to_age)


  Returns the survival through attained age to_age. The start of the 
  calculation is either the start of the vector, or attained age `from_age` 
  and `to_age` need to be Integers. 

  Add a DeathDistribution as the last argument to handle floating point 
  and non-whole ages:

    survival(mortality_vector,to_age,::DeathDistribution)
    survival(mortality_vector,from_age,to_age,::DeathDistribution)


  If given a negative to_age, it will return 1.0. Aside from simplifying the code, 
  this makes sense as for something to exist in order to decrement in the first place, 
  it must have existed and survived to the point of being able to be decremented.

  Examples
  ≡≡≡≡≡≡≡≡≡≡

  julia> qs = UltimateMortality([0.1,0.3,0.6,1]);

  julia> survival(qs,0)
  1.0
  julia> survival(qs,1)
  0.9

  julia> survival(qs,1,1)
  1.0
  julia> survival(qs,1,2)
  0.7

  julia> survival(qs,0.5,Uniform())
  0.95
```


## Contributing

> Contribute code or report issues.

~~~
<mark>Thank you</mark> for your interest in modern actuarial solutions, no matter how you participate in the community.</p>
~~~

### Pull Requests

JuliaActuary is open source; you are free to modify, use, or change your copy of the code - but if you make enhancements please consider opening a pull request ([basic walkthrough here](https://kshyatt.github.io/post/firstjuliapr/)). Beginners are welcome and we can help with your first pull request!

### Issues

If you find issues, please open an issue on the relevant package's repository and we will try and address it as soon as possible.

### Project Board

See the [Good first Issues](https://github.com/orgs/JuliaActuary/projects/2) project board on Github for simple, self-contained ways to contribute such as adding small new features, improving the documentation, or writing up a tutorial on how to do something simple!

### Creating Examples, Tutorials, or Blog Posts

This site is a basic Quarto website. New content can be added by creating a pull request with a new page in the `posts` folder. A blog post is distinguished from the other examples content by the simple virtue of having the `blog` category field in the topmatter of the `.qmd` file.

## Other Inquiries

For more directed inquires, please send email to [inquiry@JuliaActuary.org](mailto:inquiry@juliaactuary.org).

## Share 

Follow [JuliaActuary](https://www.linkedin.com/company/juliaactuary) on LinkedIn for updates and to share with colleagues!