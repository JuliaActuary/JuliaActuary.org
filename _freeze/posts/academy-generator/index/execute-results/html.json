{
  "hash": "b50fafc4835ce795a832b4e4cacea200",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Replicating the AAA equtity generator\"\ncategories: [modeling,scenario-generator]\n---\n\n\n\n::: {#844a6cea .cell execution_count=2}\n``` {.julia .cell-code}\nusing CairoMakie\nusing ColorSchemes\nusing Distributions\nusing LabelledArrays\nusing Random\n```\n:::\n\n\nThis notebook replicates the model and parameters for the real world equity generator described in this [AAA 2005 reference paper](https://www.actuary.org/sites/default/files/pdf/life/c3supp_march05.pdf).\n\n## Stochastic Log Volatility Model\n\nNote that the `@.` and other broadcasting (`.` symbol) allows us to operate on multiple funds at once.\n\n::: {#8a5279e5 .cell execution_count=3}\n``` {.julia .cell-code}\nfunction v(v_prior,params,Zₜ) \n\t(;σ_v, σ_m,σ_p,σ⃰,ϕ,τ) = params\n\t\n\tv_m = log.(σ_m)\n\tv_p = log.(σ_p)\n\tv⃰ = log.(σ⃰)\n\n\t# vol are the odd values in the random array\n\tṽ =  @. min(v_p, (1 - ϕ) * v_prior + ϕ * log(τ) ) + σ_v * Zₜ[[1,3,5,7]]\n\t\n\tv = @. max(v_m, min(v⃰,ṽ))\n\n\treturn v\nend\n\nfunction scenario(params,Z;months=1200)\n\t(;σ_v,σ_0, ρ,A,B,C) = params\n\n\tn_funds = size(params,2)\n\t\n\t#initilize/pre-allocate\n\tZₜ = rand(Z)\n\tv_t = log.(σ_0)\n\tσ_t = zeros(n_funds)\n\tμ_t = zeros(n_funds)\n\t\n\tlog_returns = map(1:months) do t\n\t\tZₜ = rand!(Z,Zₜ)\n\t\tv_t .= v(v_t,params,Zₜ)\n\n\t\tσ_t .= exp.(v_t)\n\n\t\t@. μ_t =  A + B * σ_t + C * (σ_t)^2\n\n\t\t# return are the even values in the random array\n\t\tlog_return = @. μ_t / 12 + σ_t / sqrt(12) * Zₜ[[2,4,6,8]]\n\tend\n\n\t# convert vector of vector to matrix\n\treduce(hcat,log_returns)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nscenario (generic function with 1 method)\n```\n:::\n:::\n\n\n## Model Parameters\n\n::: {#ac7056b0 .cell execution_count=4}\n``` {.julia .cell-code}\n# use a labelled array for easy reference of the parameters \nparams = @LArray [\n    0.12515 0.14506 0.16341 0.20201     # τ\n    0.35229 0.41676 0.3632 0.35277      # ϕ\n    0.32645 0.32634 0.35789 0.34302     # σ_v\n    -0.2488 -0.1572 -0.2756 -0.2843     # ρ\n    0.055 0.055 0.055 0.055             # A\n    0.56 0.466 0.67 0.715               # B\n    -0.9 -0.9 -0.95 -1.0                # C\n    0.1476 0.1688 0.2049 0.2496         # σ_0\n    0.0305 0.0354 0.0403 0.0492         # σ_m\n    0.3 0.3 0.4 0.55                    # σ_p\n    0.7988 0.4519 0.9463 1.1387         # σ⃰\n] ( \n\t# define the regions each label refers to\n\tτ = (1,:),\n\tϕ = (2,:),\n\tσ_v = (3,:),\n\tρ = (4,:),\n\tA = (5,:),\n\tB = (6,:),\n\tC = (7,:),\n\tσ_0 = (8,:),\n\tσ_m = (9,:),\n\tσ_p = (10,:),\n\tσ⃰ = (11,:)\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n11×4 LArray{Float64, 2, Matrix{Float64}, (τ = (1, Colon()), ϕ = (2, Colon()), σ_v = (3, Colon()), ρ = (4, Colon()), A = (5, Colon()), B = (6, Colon()), C = (7, Colon()), σ_0 = (8, Colon()), σ_m = (9, Colon()), σ_p = (10, Colon()), σ⃰ = (11, Colon()))}:\n   :τ => 0.12515  …    :τ => 0.20201\n   :ϕ => 0.35229       :ϕ => 0.35277\n :σ_v => 0.32645     :σ_v => 0.34302\n   :ρ => -0.2488       :ρ => -0.2843\n   :A => 0.055         :A => 0.055\n   :B => 0.56     …    :B => 0.715\n   :C => -0.9          :C => -1.0\n :σ_0 => 0.1476      :σ_0 => 0.2496\n :σ_m => 0.0305      :σ_m => 0.0492\n :σ_p => 0.3         :σ_p => 0.55\n   :σ⃰ => 0.7988   …    :σ⃰ => 1.1387\n```\n:::\n:::\n\n\n### The Multivariate normal and covariance matrix\n\n::: {#d09cb714 .cell execution_count=5}\n``` {.julia .cell-code}\n# 11 columns because it's got the bond returns in it\ncov_matrix = [\n\t1.000\t-0.249\t0.318\t-0.082\t0.625\t-0.169\t0.309\t-0.183\t0.023\t0.075\t0.080;\n\t-0.249\t1.000\t-0.046\t0.630\t-0.123\t0.829\t-0.136\t0.665\t-0.120\t0.192\t0.393;\n\t0.318\t-0.046\t1.000\t-0.157\t0.259\t-0.050\t0.236\t-0.074\t-0.066\t0.034\t0.044;\n\t-0.082\t0.630\t-0.157\t1.000\t-0.063\t0.515\t-0.098\t0.558\t-0.105\t0.130\t0.234;\n\t0.625\t-0.123\t0.259\t-0.063\t1.000\t-0.276\t0.377\t-0.180\t0.034\t0.028\t0.054;\n\t-0.169\t0.829\t-0.050\t0.515\t-0.276\t1.000\t-0.142\t0.649\t-0.106\t0.067\t0.267;\n\t0.309\t-0.136\t0.236\t-0.098\t0.377\t-0.142\t1.000\t-0.284\t0.026\t0.006\t0.045;\n\t-0.183\t0.665\t-0.074\t0.558\t-0.180\t0.649\t-0.284\t1.000\t0.034\t-0.091\t-0.002;\n\t0.023\t-0.120\t-0.066\t-0.105\t0.034\t-0.106\t0.026\t0.034\t1.000\t0.047\t-0.028;\n\t0.075\t0.192\t0.034\t0.130\t0.028\t0.067\t0.006\t-0.091\t0.047\t1.000\t0.697;\n\t0.080\t0.393\t0.044\t0.234\t0.054\t0.267\t0.045\t-0.002\t-0.028\t0.697\t1.000;\n]\n\n\tZ = MvNormal(\n\t\tzeros(11), #means for return and volatility\n\t\tcov_matrix # covariance matrix\n\t\t# full covariance matrix in AAA Excel workook on Parameters tab\n\t)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nFullNormal(\ndim: 11\nμ: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\nΣ: [1.0 -0.249 … 0.075 0.08; -0.249 1.0 … 0.192 0.393; … ; 0.075 0.192 … 1.0 0.697; 0.08 0.393 … 0.697 1.0]\n)\n```\n:::\n:::\n\n\n## Scenarios and validation\n\n### A single scenario\n\n::: {#a5b0a431 .cell execution_count=6}\n``` {.julia .cell-code}\nx = scenario(params,Z;months=1200)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n4×1200 Matrix{Float64}:\n 0.0752418  -0.000684304  0.0803535  …   0.000348079  -0.00459584\n 0.0253968   0.0235449    0.0841353      0.0127518    -0.0323876\n 0.0893632   0.0144473    0.0872761     -0.0191581     0.00114621\n 0.138261    0.0343143    0.0945716     -0.0176436    -0.029718\n```\n:::\n:::\n\n\n### Validation of summary statistics\n\nThe summary statistics expected (per paper Table 8):\n\n- `μ ≈ [0.0060, 0.0062, 0.0063, 0.0065]`\n- `σ ≈ [0.0436, 0.0492, 0.0590, 0.0724]`\n\nThese computed values match very closely:\n\n::: {#aafbb7a7 .cell execution_count=7}\n``` {.julia .cell-code}\n# generate 1000 scenarios \nscens = [scenario(params,Z) for _ in 1:1000];\n\nlet\n\t# compute summary statistics\n\tμ = vec(mean(mean(x,dims=2) for x in scens))\n\tσ = vec(mean(std(x,dims=2) for x in scens))\n\t(;μ,σ)\nend\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n(μ = [0.005996167539900355, 0.006165861874564148, 0.006254386906381312, 0.006366151507437672], σ = [0.0436367414351783, 0.04920555060632976, 0.05914308496454576, 0.0724382319579281])\n```\n:::\n:::\n\n\n## Plotting some scenarios\n\n::: {#ff979cfd .cell execution_count=8}\n``` {.julia .cell-code}\nlet \n\tf = Figure()\n\tn = 25\n\tcolors = ColorSchemes.Johnson\n\tax = Axis(f[1,1],yscale=log10,ylabel=\"index value\",\n\t\ttitle=\"$n realizations of 4 correlated equity funds per AAA ESG\")\n\tfor s in scens[1:n]\n\t\tfor i in 1:4\n\t\tlines!(ax,cumprod(exp.(s[i,:])), color=(colors[i],0.3),label=\"fund $i\")\n\t\tend\n\tend\n\taxislegend(ax,unique=true,position=:lt)\n\tf\nend\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n┌ Warning: Found `resolution` in the theme when creating a `Scene`. The `resolution` keyword for `Scene`s and `Figure`s has been deprecated. Use `Figure(; size = ...` or `Scene(; size = ...)` instead, which better reflects that this is a unitless size and not a pixel resolution. The key could also come from `set_theme!` calls or related theming functions.\n└ @ Makie ~/.julia/packages/Makie/We6MY/src/scenes.jl:227\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n![](index_files/figure-html/cell-9-output-2.svg){}\n:::\n:::\n\n\n## See also\n\n[Interactive AAA Economic Scenario Generator](/examples/academy-generator-rates/)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}