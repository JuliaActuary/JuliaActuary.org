{
  "hash": "ea2574d7857938942c179c2bbcb0aa47",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Exposure Calculation with ExperienceAnalysis.jl\"\ncategories: [mortalitytables, exposures,experience-analysis,dataframes,tutorial]\n---\n\n\n\nIn this tutorial, we will walk through how to calculate exposures using the [ExperienceAnalysis.jl package](/packages/#lifecontingenciesjl).\n\nIn summary, the package will help calculate the exposure periods given parameters about the kind of period and timepoints under consideration. This will return an array of tuples with a `from` and `to` date:\n\n::: {#0013f51a .cell execution_count=2}\n``` {.julia .cell-code}\nusing ExperienceAnalysis\nusing Dates\n\nissue = Date(2016, 7, 4)\ntermination = Date(2020, 1, 17)\nbasis = ExperienceAnalysis.Anniversary(Year(1))\nexposure(basis, issue, termination)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n4-element Vector{@NamedTuple{from::Date, to::Date, policy_timestep::Int64}}:\n (from = Date(\"2016-07-04\"), to = Date(\"2017-07-03\"), policy_timestep = 1)\n (from = Date(\"2017-07-04\"), to = Date(\"2018-07-03\"), policy_timestep = 2)\n (from = Date(\"2018-07-04\"), to = Date(\"2019-07-03\"), policy_timestep = 3)\n (from = Date(\"2019-07-04\"), to = Date(\"2020-01-17\"), policy_timestep = 4)\n```\n:::\n:::\n\n\n## Available Exposure Basis\n\n- `ExperienceAnalysis.Anniversary(period)` will give exposures periods based on the first date\n- `ExperienceAnalysis.Calendar(period)` will follow calendar periods (e.g. month or year)\n- `ExperienceAnalysis.AnniversaryCalendar(period,period)` will split into the smaller of the calendar or policy anniversary period.\n\nWhere `period` is a [Period Type from the Dates standard library](https://docs.julialang.org/en/v1/stdlib/Dates/#Period-Types).\n\nCalculate exposures with `exposures(basis,from,to,continue_exposure)`. \n\n- `continue_exposures` indicates whether the exposure should be extended through the full exposure period rather than terminate at the `to` date.\n\n## Full Example\n\n\nWe'll start with this as our data:\n\n::: {#1a4e3c60 .cell execution_count=3}\n``` {.julia .cell-code}\nusing DataFrames\ndf = DataFrame(\n    id=[1, 2, 3],\n    issue=[Date(2016, 7, 4), Date(2016, 1, 1), Date(2016, 1, 1)],\n    end_date=[Date(2020, 1, 17), Date(2018, 5, 4), Date(2020, 12, 31)],\n    status=[\"Claim\", \"Lapse\", \"Inforce\"]\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<div><div style = \"float: left;\"><span>3×4 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">id</th><th style = \"text-align: left;\">issue</th><th style = \"text-align: left;\">end_date</th><th style = \"text-align: left;\">status</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Date\" style = \"text-align: left;\">Date</th><th title = \"Date\" style = \"text-align: left;\">Date</th><th title = \"String\" style = \"text-align: left;\">String</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">2016-07-04</td><td style = \"text-align: left;\">2020-01-17</td><td style = \"text-align: left;\">Claim</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">2</td><td style = \"text-align: left;\">2016-01-01</td><td style = \"text-align: left;\">2018-05-04</td><td style = \"text-align: left;\">Lapse</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">3</td><td style = \"text-align: left;\">2016-01-01</td><td style = \"text-align: left;\">2020-12-31</td><td style = \"text-align: left;\">Inforce</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\nDefine the start and end of the study:\n\n::: {#5c1c826c .cell execution_count=4}\n``` {.julia .cell-code}\nstudy_end = Date(2020, 6, 30)\nstudy_start = Date(2018, 6, 30)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n2018-06-30\n```\n:::\n:::\n\n\nCalculate the exposure by [broadcasting](https://docs.julialang.org/en/v1/manual/mathematical-operations/#man-dot-operators) the exposure function over the three arrays we are passing to it: \n\n::: {#e45d65bb .cell execution_count=5}\n``` {.julia .cell-code}\ndf.exposure = exposure.(\n    ExperienceAnalysis.Anniversary(Year(1)),   # The basis for our exposures\n    df.issue,                                  # The `from` date\n    df.end_date,                               # the last observed date\n    df.status .== \"Claim\";                        # a boolean vector indicating continuation\n    study_start=study_start,\n    study_end=study_end\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n3-element Vector{Vector{@NamedTuple{from::Date, to::Date, policy_timestep::Int64}}}:\n [(from = Date(\"2018-06-30\"), to = Date(\"2018-07-03\"), policy_timestep = 2), (from = Date(\"2018-07-04\"), to = Date(\"2019-07-03\"), policy_timestep = 3), (from = Date(\"2019-07-04\"), to = Date(\"2020-07-03\"), policy_timestep = 4)]\n []\n [(from = Date(\"2018-06-30\"), to = Date(\"2018-12-31\"), policy_timestep = 3), (from = Date(\"2019-01-01\"), to = Date(\"2019-12-31\"), policy_timestep = 4), (from = Date(\"2020-01-01\"), to = Date(\"2020-06-30\"), policy_timestep = 5)]\n```\n:::\n:::\n\n\nIn our dataframe, we actually have a column that contains an array of tuples now, so to expand it so that each exposure period gets a row, we `flatten` the dataframe to get our exposures:\n\n::: {#a29a4547 .cell execution_count=6}\n``` {.julia .cell-code}\ndf = flatten(df, :exposure)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<div><div style = \"float: left;\"><span>6×5 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">id</th><th style = \"text-align: left;\">issue</th><th style = \"text-align: left;\">end_date</th><th style = \"text-align: left;\">status</th><th style = \"text-align: left;\">exposure</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"Int64\" style = \"text-align: left;\">Int64</th><th title = \"Date\" style = \"text-align: left;\">Date</th><th title = \"Date\" style = \"text-align: left;\">Date</th><th title = \"String\" style = \"text-align: left;\">String</th><th title = \"@NamedTuple{from::Date, to::Date, policy_timestep::Int64}\" style = \"text-align: left;\">NamedTup…</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">2016-07-04</td><td style = \"text-align: left;\">2020-01-17</td><td style = \"text-align: left;\">Claim</td><td style = \"text-align: left;\">(from = Date(&quot;2018-06-30&quot;), to = Date(&quot;2018-07-03&quot;), policy_timestep = 2)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">2016-07-04</td><td style = \"text-align: left;\">2020-01-17</td><td style = \"text-align: left;\">Claim</td><td style = \"text-align: left;\">(from = Date(&quot;2018-07-04&quot;), to = Date(&quot;2019-07-03&quot;), policy_timestep = 3)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: right;\">1</td><td style = \"text-align: left;\">2016-07-04</td><td style = \"text-align: left;\">2020-01-17</td><td style = \"text-align: left;\">Claim</td><td style = \"text-align: left;\">(from = Date(&quot;2019-07-04&quot;), to = Date(&quot;2020-07-03&quot;), policy_timestep = 4)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: right;\">3</td><td style = \"text-align: left;\">2016-01-01</td><td style = \"text-align: left;\">2020-12-31</td><td style = \"text-align: left;\">Inforce</td><td style = \"text-align: left;\">(from = Date(&quot;2018-06-30&quot;), to = Date(&quot;2018-12-31&quot;), policy_timestep = 3)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: right;\">3</td><td style = \"text-align: left;\">2016-01-01</td><td style = \"text-align: left;\">2020-12-31</td><td style = \"text-align: left;\">Inforce</td><td style = \"text-align: left;\">(from = Date(&quot;2019-01-01&quot;), to = Date(&quot;2019-12-31&quot;), policy_timestep = 4)</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: right;\">3</td><td style = \"text-align: left;\">2016-01-01</td><td style = \"text-align: left;\">2020-12-31</td><td style = \"text-align: left;\">Inforce</td><td style = \"text-align: left;\">(from = Date(&quot;2020-01-01&quot;), to = Date(&quot;2020-06-30&quot;), policy_timestep = 5)</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n### Exposure Fraction\n\nThis can be extended to calculate the decimal fraction of the year under different day count conventions, such as assuming 30/360 or Actual/365, etc. using the [`DayCounts.jl` package](https://github.com/JuliaFinance/DayCounts.jl).\n\n::: {#65542be7 .cell execution_count=7}\n``` {.julia .cell-code}\nusing DayCounts\n\ndf.exposure_fraction = map(e -> yearfrac(e.from, e.to, DayCounts.Actual360()), df.exposure)\ndf[:, [:exposure, :exposure_fraction]]\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div><div style = \"float: left;\"><span>6×2 DataFrame</span></div><div style = \"clear: both;\"></div></div><div class = \"data-frame\" style = \"overflow-x: scroll;\"><table class = \"data-frame\" style = \"margin-bottom: 6px;\"><thead><tr class = \"header\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">Row</th><th style = \"text-align: left;\">exposure</th><th style = \"text-align: left;\">exposure_fraction</th></tr><tr class = \"subheader headerLastRow\"><th class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\"></th><th title = \"@NamedTuple{from::Date, to::Date, policy_timestep::Int64}\" style = \"text-align: left;\">NamedTup…</th><th title = \"Float64\" style = \"text-align: left;\">Float64</th></tr></thead><tbody><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">1</td><td style = \"text-align: left;\">(from = Date(&quot;2018-06-30&quot;), to = Date(&quot;2018-07-03&quot;), policy_timestep = 2)</td><td style = \"text-align: right;\">0.00833333</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">2</td><td style = \"text-align: left;\">(from = Date(&quot;2018-07-04&quot;), to = Date(&quot;2019-07-03&quot;), policy_timestep = 3)</td><td style = \"text-align: right;\">1.01111</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">3</td><td style = \"text-align: left;\">(from = Date(&quot;2019-07-04&quot;), to = Date(&quot;2020-07-03&quot;), policy_timestep = 4)</td><td style = \"text-align: right;\">1.01389</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">4</td><td style = \"text-align: left;\">(from = Date(&quot;2018-06-30&quot;), to = Date(&quot;2018-12-31&quot;), policy_timestep = 3)</td><td style = \"text-align: right;\">0.511111</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">5</td><td style = \"text-align: left;\">(from = Date(&quot;2019-01-01&quot;), to = Date(&quot;2019-12-31&quot;), policy_timestep = 4)</td><td style = \"text-align: right;\">1.01111</td></tr><tr><td class = \"rowNumber\" style = \"font-weight: bold; text-align: right;\">6</td><td style = \"text-align: left;\">(from = Date(&quot;2020-01-01&quot;), to = Date(&quot;2020-06-30&quot;), policy_timestep = 5)</td><td style = \"text-align: right;\">0.502778</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n## Discussion and Questions\n\nIf you have other ideas or questions, feel free to also open an issue, or discuss on the community [Zulip](https://julialang.zulipchat.com/#narrow/stream/249536-actuary) or [Slack #actuary channel](https://slackinvite.julialang.org/). We welcome all actuarial and related disciplines!\n\n### References\n\n- [Experience Study Calculations](https://www.soa.org/globalassets/assets/files/research/experience-study-calculations.pdf) by the Society of Actuaries\n- [ExperienceAnalysis.jl package on GitHub](https://github.com/JuliaActuary/ExperienceAnalysis.jl)\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}